// =============================================================================
// Font Face
// =============================================================================

// @mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
//     $src: null;
    
//     $extmods: (
//         eot: "?",
//         svg: "#" + str-replace($name, " ", "_")
//     );
    
//     $formats: (
//         otf: "opentype",
//         ttf: "truetype"
//     );
    
//     @each $ext in $exts {
//         $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
//         $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
//         $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
//     }
    
//     @font-face {
//         font-family: quote($name);
//         font-style: $style;
//         font-weight: $weight;
//         src: $src;
//     }
// }

// =============================================================================
// Font 반응형
// ==

// $min-width: 360px;
// $max-width: 1024px;
// $font-size10: 10px;
// $font-size20: 20px;
// $font-size30: 30px;
// $font-size40: 40px;
// $font-size50: 50px;

// @function strip-unit($value) {
//     @return $value / ($value * 0 + 1);
// }

// @mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
//     $u1: unit($min-vw);
//     $u2: unit($max-vw);
//     $u3: unit($min-font-size);
//     $u4: unit($max-font-size);

//     @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
//         & {
//             font-size: $min-font-size;
//             @media screen and (min-width: $min-vw) {
//                 font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
//             }
//             @media screen and (min-width: $max-vw) {
//                 font-size: $max-font-size;
//             }
//         }
//     }
// }

